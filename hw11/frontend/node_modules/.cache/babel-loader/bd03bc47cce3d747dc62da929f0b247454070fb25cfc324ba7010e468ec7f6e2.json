{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: [],\n      users: []\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n\n    //\n    this.$root.$on(\"onRegister\", (login, name, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n        return;\n      }\n      if (login === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login is required\");\n        return;\n      }\n      if (name === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name is required\");\n        return;\n      }\n      axios.post(\"/api/1/register\", {\n        login,\n        name,\n        password\n      }).then(response => {\n        response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(error => {\n        this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n      });\n    });\n    //\n\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (text.trim() === \"\") {\n        this.$root.$emit(\"onWritePostValidationError\", \"Text is required\");\n        return;\n      }\n      if (title.trim() === \"\") {\n        this.$root.$emit(\"onWritePostError\", \"Title is required\");\n        return;\n      }\n      if (/^\\s+$/.test(title) || /^\\s+$/.test(text)) {\n        this.$root.$emit(\"onWritePostValidationError\", \"Title or text should not consist of only spaces\");\n        return;\n      }\n      if (!/^[a-zA-Z\\s\\n]+$/.test(title) || !/^[a-zA-Z\\s\\n]+$/.test(text)) {\n        // Проверка, состоит ли строка только из английских букв, пробелов и переносов строки\n        this.$root.$emit(\"onWritePostValidationError\", \"Title and text should consist of only English letters, spaces, and line breaks\");\n        return;\n      }\n      axios.post(\"/api/1/write\", {\n        title,\n        text,\n        user: this.user\n      }).then(response => {\n        this.posts.push(response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onWritePostError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n  }\n};","map":{"version":3,"names":["Header","Middle","Footer","axios","name","components","data","user","posts","users","beforeMount","localStorage","getItem","$root","$emit","get","then","response","beforeCreate","$on","login","password","post","setItem","catch","error","jwt","params","title","text","trim","test","push","removeItem"],"sources":["src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :user=\"user\"/>\n        <Middle :posts=\"posts\" :users=\"users\"/>\n\n        <Footer/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\n\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header,\n\n    },\n    data: function () {\n        return {\n            user: null,\n            posts: [],\n            users:[]\n        }\n    },\n    beforeMount() {\n        if (localStorage.getItem(\"jwt\") && !this.user) {\n            this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n        }\n\n        axios.get(\"/api/1/posts\").then(response => {\n            this.posts = response.data;\n        });\n\n        axios.get(\"/api/1/users\").then(response =>{\n          this.users=response.data;\n        })\n    },\n    beforeCreate() {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            axios.post(\"/api/1/jwt\", {\n                    login, password\n            }).then(response => {\n                localStorage.setItem(\"jwt\", response.data);\n                this.$root.$emit(\"onJwt\", response.data);\n            }).catch(error => {\n                this.$root.$emit(\"onEnterValidationError\", error.response.data);\n            });\n        });\n\n        this.$root.$on(\"onJwt\", (jwt) => {\n            localStorage.setItem(\"jwt\", jwt);\n\n            axios.get(\"/api/1/users/auth\", {\n                params: {\n                    jwt\n                }\n            }).then(response => {\n                this.user = response.data;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }).catch(() => this.$root.$emit(\"onLogout\"))\n        });\n\n\n        //\n      this.$root.$on(\"onRegister\", (login, name, password) => {\n        if (password === \"\") {\n          this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n          return;\n        }\n        if (login === \"\") {\n          this.$root.$emit(\"onRegisterValidationError\", \"Login is required\");\n          return;\n        }\n        if (name === \"\") {\n          this.$root.$emit(\"onRegisterValidationError\", \"Name is required\");\n          return;\n        }\n\n        axios.post(\"/api/1/register\", {\n          login, name, password\n        }).then(response => {\n          response.data;\n          this.$root.$emit(\"onChangePage\", \"Index\");\n        }).catch(error => {\n          this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n        });\n\n      });\n        //\n\n      this.$root.$on(\"onWritePost\", (title, text) => {\n        if (text.trim() === \"\") {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is required\");\n          return;\n        }\n\n        if (title.trim() === \"\") {\n          this.$root.$emit(\"onWritePostError\", \"Title is required\");\n          return;\n        }\n\n        if (/^\\s+$/.test(title) || /^\\s+$/.test(text)) {\n\n          this.$root.$emit(\"onWritePostValidationError\", \"Title or text should not consist of only spaces\");\n          return;\n        }\n\n        if (!/^[a-zA-Z\\s\\n]+$/.test(title) || !/^[a-zA-Z\\s\\n]+$/.test(text)) {\n          // Проверка, состоит ли строка только из английских букв, пробелов и переносов строки\n          this.$root.$emit(\"onWritePostValidationError\", \"Title and text should consist of only English letters, spaces, and line breaks\");\n          return;\n        }\n\n        axios.post(\"/api/1/write\", {\n          title,\n          text,\n          user: this.user\n        }).then(response => {\n          this.posts.push(response.data);\n        }).catch(error => {\n          this.$root.$emit(\"onWritePostError\", error.response.data);\n        });\n      });\n\n\n\n      this.$root.$on(\"onLogout\", () => {\n            localStorage.removeItem(\"jwt\");\n            this.user = null;\n        });\n\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}